"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import npc_control.Waypoint

class action_result(object):
    __slots__ = ["vehicle_id", "current_pos", "current_speed"]

    __typenames__ = ["string", "npc_control.Waypoint", "double"]

    __dimensions__ = [None, None, [3]]

    def __init__(self):
        self.vehicle_id = ""
        self.current_pos = npc_control.Waypoint()
        self.current_speed = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(action_result._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __vehicle_id_encoded = self.vehicle_id.encode('utf-8')
        buf.write(struct.pack('>I', len(__vehicle_id_encoded)+1))
        buf.write(__vehicle_id_encoded)
        buf.write(b"\0")
        assert self.current_pos._get_packed_fingerprint() == npc_control.Waypoint._get_packed_fingerprint()
        self.current_pos._encode_one(buf)
        buf.write(struct.pack('>3d', *self.current_speed[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != action_result._get_packed_fingerprint():
            raise ValueError("Decode error")
        return action_result._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = action_result()
        __vehicle_id_len = struct.unpack('>I', buf.read(4))[0]
        self.vehicle_id = buf.read(__vehicle_id_len)[:-1].decode('utf-8', 'replace')
        self.current_pos = npc_control.Waypoint._decode_one(buf)
        self.current_speed = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if action_result in parents: return 0
        newparents = parents + [action_result]
        tmphash = (0xa3d905b7b255b3b7+ npc_control.Waypoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if action_result._packed_fingerprint is None:
            action_result._packed_fingerprint = struct.pack(">Q", action_result._get_hash_recursive([]))
        return action_result._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


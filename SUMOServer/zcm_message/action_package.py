"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from Waypoint import Waypoint

class action_package(object):
    __slots__ = ["vehicle_id", "waypoints", "target_speed"]

    def __init__(self):
        self.vehicle_id = 0
        self.waypoints = [ Waypoint() for dim0 in range(10) ]
        self.target_speed = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(action_package._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.vehicle_id))
        for i0 in range(10):
            assert self.waypoints[i0]._get_packed_fingerprint() == Waypoint._get_packed_fingerprint()
            self.waypoints[i0]._encode_one(buf)
        buf.write(struct.pack(">d", self.target_speed))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != action_package._get_packed_fingerprint():
            raise ValueError("Decode error")
        return action_package._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = action_package()
        self.vehicle_id = struct.unpack(">h", buf.read(2))[0]
        self.waypoints = []
        for i0 in range(10):
            self.waypoints.append(Waypoint._decode_one(buf))
        self.target_speed = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if action_package in parents: return 0
        newparents = parents + [action_package]
        tmphash = (0x8f3ef868f9459250+ Waypoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if action_package._packed_fingerprint is None:
            action_package._packed_fingerprint = struct.pack(">Q", action_package._get_hash_recursive([]))
        return action_package._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)


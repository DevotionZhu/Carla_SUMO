"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lidarframe(object):
    __slots__ = ["data", "number", "dx", "dy", "dz", "pitch", "roll", "yaw", "frameid"]

    def __init__(self):
        self.data = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(130000) ]
        self.number = 0
        self.dx = 0.0
        self.dy = 0.0
        self.dz = 0.0
        self.pitch = 0.0
        self.roll = 0.0
        self.yaw = 0.0
        self.frameid = 0

    def encode(self):
        buf = BytesIO()
        buf.write(lidarframe._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(130000):
            buf.write(struct.pack('>3f', *self.data[i0][:3]))
        buf.write(struct.pack(">qffffffq", self.number, self.dx, self.dy, self.dz, self.pitch, self.roll, self.yaw, self.frameid))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lidarframe._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lidarframe._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lidarframe()
        self.data = []
        for i0 in range(130000):
            self.data.append(struct.unpack('>3f', buf.read(12)))
        self.number, self.dx, self.dy, self.dz, self.pitch, self.roll, self.yaw, self.frameid = struct.unpack(">qffffffq", buf.read(40))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lidarframe in parents: return 0
        tmphash = (0x9a889f2cfd1eeb3c) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lidarframe._packed_fingerprint is None:
            lidarframe._packed_fingerprint = struct.pack(">Q", lidarframe._get_hash_recursive([]))
        return lidarframe._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

